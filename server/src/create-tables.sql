
-- SET statement_timeout = 0;
-- SET lock_timeout = 0;
-- SET idle_in_transaction_session_timeout = 0;
-- SET client_encoding = 'UTF8';
-- SET standard_conforming_strings = on;
-- SELECT pg_catalog.set_config('search_path', '', false);
-- SET check_function_bodies = false;
-- SET xmloption = content;
-- SET client_min_messages = warning;
-- SET row_security = off;


-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Group_Players"
(
    "Groups_id" integer NOT NULL,
    user_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public."Groups"
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    gm integer NOT NULL,
    CONSTRAINT "Groups_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.authentication_keys
(
    id serial NOT NULL,
    key bytea NOT NULL,
    created date NOT NULL,
    comment text COLLATE pg_catalog."default" NOT NULL,
    "user" integer NOT NULL,
    CONSTRAINT authentication_keys_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.background_type
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT background_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."character"
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    alias text COLLATE pg_catalog."default" NOT NULL,
    look text COLLATE pg_catalog."default" NOT NULL,
    heritage text COLLATE pg_catalog."default" NOT NULL,
    heritage_type integer NOT NULL,
    background text COLLATE pg_catalog."default" NOT NULL,
    background_type integer NOT NULL,
    stress integer NOT NULL DEFAULT 0,
    healing_clock integer NOT NULL DEFAULT 0,
    playbook integer NOT NULL,
    harm_1 text[] COLLATE pg_catalog."default" NOT NULL,
    harm_2 text[] COLLATE pg_catalog."default" NOT NULL,
    harm_3 text COLLATE pg_catalog."default",
    coin integer NOT NULL DEFAULT 0,
    stash integer NOT NULL DEFAULT 0,
    playbook_xp integer NOT NULL DEFAULT 0,
    insight_xp integer NOT NULL DEFAULT 0,
    prowess_xp integer NOT NULL DEFAULT 0,
    resolve_xp integer NOT NULL DEFAULT 0,
    hunt integer NOT NULL DEFAULT 0,
    study integer NOT NULL DEFAULT 0,
    survey integer NOT NULL DEFAULT 0,
    tinker integer NOT NULL DEFAULT 0,
    finesse integer NOT NULL DEFAULT 0,
    prowl integer NOT NULL DEFAULT 0,
    skirmish integer NOT NULL DEFAULT 0,
    wreck integer NOT NULL DEFAULT 0,
    attune integer NOT NULL DEFAULT 0,
    command integer NOT NULL DEFAULT 0,
    consort integer NOT NULL DEFAULT 0,
    sway integer NOT NULL DEFAULT 0,
    "user" integer NOT NULL,
    "group" integer NOT NULL,
    "max_abilities " integer NOT NULL DEFAULT 1,
    max_insight integer NOT NULL,
    max_prowess integer NOT NULL,
    max_resolve integer NOT NULL,
    CONSTRAINT character_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.chracter_playbooks
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    hunt integer NOT NULL DEFAULT 0,
    study integer NOT NULL DEFAULT 0,
    survey integer NOT NULL DEFAULT 0,
    tinker integer NOT NULL DEFAULT 0,
    finesse integer NOT NULL DEFAULT 0,
    prowl integer NOT NULL DEFAULT 0,
    skirmish integer NOT NULL DEFAULT 0,
    wreck integer NOT NULL DEFAULT 0,
    attune integer NOT NULL DEFAULT 0,
    command integer NOT NULL DEFAULT 0,
    consort integer NOT NULL DEFAULT 0,
    sway integer NOT NULL DEFAULT 0,
    max_veterans integer NOT NULL DEFAULT 3,
    CONSTRAINT chracter_playbooks_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.chracter_playbooks_special_abilities
(
    special_abilities_character_id integer NOT NULL,
    chracter_playbooks_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.claims
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    type claim_type NOT NULL DEFAULT 'normal'::claim_type,
    playbook integer NOT NULL,
    CONSTRAINT claims_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.claims_connection
(
    claims_1 integer NOT NULL,
    claims_2 integer NOT NULL,
    CONSTRAINT claims_connection_pkey PRIMARY KEY (claims_2, claims_1)
);

CREATE TABLE IF NOT EXISTS public.clocks
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default",
    segments integer NOT NULL,
    value integer NOT NULL,
    CONSTRAINT "CLOCKS_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.crew_playbooks
(
    id serial NOT NULL,
    max_rep integer NOT NULL DEFAULT 12,
    max_heat integer NOT NULL DEFAULT 9,
    name text COLLATE pg_catalog."default" NOT NULL,
    vault_increase integer[] NOT NULL,
    max_xp integer NOT NULL DEFAULT 10,
    xp_trigger text COLLATE pg_catalog."default" NOT NULL,
    veteran_abilities integer NOT NULL,
    CONSTRAINT crew_playbooks_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.grant_access
(
    id uuid NOT NULL DEFAULT uuid_generate_v1(),
    valid_until date NOT NULL,
    granted_by integer NOT NULL,
    CONSTRAINT grant_access_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.grant_access
    IS 'generate link to add additional key';

CREATE TABLE IF NOT EXISTS public.heritage_type
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT heritage_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.invites
(
    id uuid NOT NULL DEFAULT uuid_generate_v1(),
    valid_until date NOT NULL,
    granted_by integer NOT NULL,
    CONSTRAINT invites_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.specail_abilities_crew
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    playbook integer NOT NULL,
    CONSTRAINT possible_specail_abilities_crew_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.sample_contacts_crew
(
    id serial NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    playbook integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.special_abilities_character
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT special_abilities_character_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."user"
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    granted_by integer,
    CONSTRAINT user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.vice
(
    id serial NOT NULL,
    vice_type integer NOT NULL,
    "character" integer NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    purveyor text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT vice_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.vice_type
(
    id serial NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT vice_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.crew_upgrades
(
    id serial NOT NULL,
    name text NOT NULL,
    playbook integer,
    max_get integer NOT NULL DEFAULT 1,
    sloots integer NOT NULL DEFAULT 1,
    category text NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.cohorts
(
    id serial NOT NULL,
    type integer NOT NULL,
    armor boolean NOT NULL,
    kind cohort_kind NOT NULL,
    state cohort_state NOT NULL DEFAULT 'normal'::cohort_state,
    crew integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.cohort_type
(
    id serial NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.cohorts_modifier
(
    id serial NOT NULL,
    name text NOT NULL,
    "description " text NOT NULL,
    type cohort_modifier NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.cohorts_modifier_cohorts
(
    cohorts_modifier_id serial NOT NULL,
    cohorts_id serial NOT NULL,
    PRIMARY KEY (cohorts_modifier_id, cohorts_id)
);

CREATE TABLE IF NOT EXISTS public.crews
(
    id serial NOT NULL,
    name text NOT NULL,
    "group" integer NOT NULL,
    playbook integer NOT NULL,
    rep integer NOT NULL DEFAULT 0,
    hold hold NOT NULL DEFAULT 'strong',
    tier integer NOT NULL DEFAULT 0,
    heat integer NOT NULL DEFAULT 0,
    wnated_level integer NOT NULL DEFAULT 0,
    coin integer NOT NULL DEFAULT 2,
    "vaults " integer NOT NULL DEFAULT 0,
    lair text NOT NULL,
    xp integer NOT NULL DEFAULT 0,
    notes text NOT NULL DEFAULT '',
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.crew_upgrades_taken
(
    crews_id serial NOT NULL,
    crew_upgrades_id serial NOT NULL,
    taken integer NOT NULL DEFAULT 1,
    PRIMARY KEY (crews_id, crew_upgrades_id)
);

CREATE TABLE IF NOT EXISTS public.specail_abilities_crew_taken
(
    specail_abilities_crew_id serial NOT NULL,
    crews_id serial NOT NULL,
    PRIMARY KEY (specail_abilities_crew_id, crews_id)
);

CREATE TABLE IF NOT EXISTS public.crew_contacts
(
    id serial NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    modifier integer NOT NULL,
    crew integer NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."Group_Players"
    ADD CONSTRAINT "Group_Players_Groups_id_fkey" FOREIGN KEY ("Groups_id")
    REFERENCES public."Groups" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Group_Players"
    ADD CONSTRAINT "Group_Players_user_id_fkey" FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."Groups"
    ADD CONSTRAINT gm_fk FOREIGN KEY (gm)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public.authentication_keys
    ADD CONSTRAINT user_fk FOREIGN KEY ("user")
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."character"
    ADD CONSTRAINT character_background_type_fkey FOREIGN KEY (background_type)
    REFERENCES public.background_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."character"
    ADD CONSTRAINT character_group_fkey FOREIGN KEY ("group")
    REFERENCES public."Groups" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."character"
    ADD CONSTRAINT character_heritage_type_fkey FOREIGN KEY (heritage_type)
    REFERENCES public.heritage_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."character"
    ADD CONSTRAINT character_playbook_fkey FOREIGN KEY (playbook)
    REFERENCES public.chracter_playbooks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."character"
    ADD CONSTRAINT character_user_fkey FOREIGN KEY ("user")
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.chracter_playbooks_special_abilities
    ADD CONSTRAINT chracter_playbooks_special_ab_special_abilities_character__fkey FOREIGN KEY (special_abilities_character_id)
    REFERENCES public.special_abilities_character (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.chracter_playbooks_special_abilities
    ADD CONSTRAINT chracter_playbooks_special_abilities_chracter_playbooks_id_fkey FOREIGN KEY (chracter_playbooks_id)
    REFERENCES public.chracter_playbooks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.claims
    ADD CONSTRAINT claims_playbook_fkey FOREIGN KEY (playbook)
    REFERENCES public.crew_playbooks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.claims_connection
    ADD CONSTRAINT claims_connection_claims_1_fkey FOREIGN KEY (claims_1)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.claims_connection
    ADD CONSTRAINT claims_connection_claims_2_fkey FOREIGN KEY (claims_2)
    REFERENCES public.claims (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.grant_access
    ADD CONSTRAINT grant_access_granted_by_fkey FOREIGN KEY (granted_by)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.invites
    ADD CONSTRAINT generated_by_fk FOREIGN KEY (granted_by)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.specail_abilities_crew
    ADD CONSTRAINT possible_specail_abilities_crew_playbook_fkey FOREIGN KEY (playbook)
    REFERENCES public.crew_playbooks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.sample_contacts_crew
    ADD FOREIGN KEY (playbook)
    REFERENCES public.crew_playbooks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."user"
    ADD CONSTRAINT granted_by_fk FOREIGN KEY (granted_by)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public.vice
    ADD CONSTRAINT vice_character_fkey FOREIGN KEY ("character")
    REFERENCES public."character" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.vice
    ADD CONSTRAINT vice_vice_type_fkey FOREIGN KEY (vice_type)
    REFERENCES public.vice_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.crew_upgrades
    ADD FOREIGN KEY (playbook)
    REFERENCES public.crew_playbooks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.cohorts
    ADD FOREIGN KEY (type)
    REFERENCES public.cohort_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cohorts
    ADD FOREIGN KEY (crew)
    REFERENCES public.crews (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cohorts_modifier_cohorts
    ADD FOREIGN KEY (cohorts_modifier_id)
    REFERENCES public.cohorts_modifier (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cohorts_modifier_cohorts
    ADD FOREIGN KEY (cohorts_id)
    REFERENCES public.cohorts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.crews
    ADD FOREIGN KEY ("group")
    REFERENCES public."Groups" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.crews
    ADD FOREIGN KEY (playbook)
    REFERENCES public.crew_playbooks (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.crew_upgrades_taken
    ADD FOREIGN KEY (crews_id)
    REFERENCES public.crews (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.crew_upgrades_taken
    ADD FOREIGN KEY (crew_upgrades_id)
    REFERENCES public.crew_upgrades (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.specail_abilities_crew_taken
    ADD FOREIGN KEY (specail_abilities_crew_id)
    REFERENCES public.specail_abilities_crew (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.specail_abilities_crew_taken
    ADD FOREIGN KEY (crews_id)
    REFERENCES public.crews (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.crew_contacts
    ADD FOREIGN KEY (crew)
    REFERENCES public.crews (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;